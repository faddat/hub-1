syntax = "proto3";
package sentinel.node.v1;

option go_package = "github.com/sentinel-official/hub/x/node/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

import "sentinel/types/v1/status.proto";

message MsgRegisterRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = true;

  string from                             = 1;
  string provider                         = 2;
  repeated cosmos.base.v1beta1.Coin price = 3 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string remote_url = 4 [ (gogoproto.customname) = "RemoteURL" ];
}

message MsgUpdateRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = true;

  string from                             = 1;
  string provider                         = 2;
  repeated cosmos.base.v1beta1.Coin price = 3 [
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string remote_url = 4 [ (gogoproto.customname) = "RemoteURL" ];
}

message MsgSetStatusRequest {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = true;

  string from                     = 1;
  sentinel.types.v1.Status status = 2;
}

message MsgRegisterResponse {}
message MsgUpdateResponse {}
message MsgSetStatusResponse {}

service MsgService {
  rpc MsgRegister(MsgRegisterRequest) returns (MsgRegisterResponse);
  rpc MsgUpdate(MsgUpdateRequest) returns (MsgUpdateResponse);
  rpc MsgSetStatus(MsgSetStatusRequest) returns (MsgSetStatusResponse);
}
