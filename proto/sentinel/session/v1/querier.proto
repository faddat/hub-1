syntax = "proto3";
package sentinel.session.v1;

option go_package = "github.com/sentinel-official/hub/x/session/types";

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "sentinel/types/v1/status.proto";
import "sentinel/session/v1/session.proto";

message QuerySessionsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySessionsForSubscriptionRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  uint64 id                                        = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QuerySessionsForNodeRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address                                   = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QuerySessionsForAddressRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address                                   = 1;
  sentinel.types.v1.Status status                  = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QuerySessionRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  uint64 id = 1;
}

message QueryActiveSessionRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address      = 1;
  string node         = 2;
  uint64 subscription = 3;
}

message QuerySessionsResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated Session sessions = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySessionsForSubscriptionResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated Session sessions = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySessionsForNodeResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated Session sessions = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySessionsForAddressResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated Session sessions = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QuerySessionResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  Session session = 1 [ (gogoproto.nullable) = false ];
}

message QueryActiveSessionResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  Session session = 1 [ (gogoproto.nullable) = false ];
}

service QueryService {
  rpc QuerySessions(QuerySessionsRequest) returns (QuerySessionsResponse) {
    option (google.api.http).get = "/sessions";
  }

  rpc QuerySessionsForNode(QuerySessionsForNodeRequest)
      returns (QuerySessionsForNodeResponse) {
    option (google.api.http).get = "/nodes/{address}/sessions";
  }

  rpc QuerySessionsForSubscription(QuerySessionsForSubscriptionRequest)
      returns (QuerySessionsForSubscriptionResponse) {
    option (google.api.http).get = "/subscriptions/{id}/sessions";
  }

  rpc QuerySessionsForAddress(QuerySessionsForAddressRequest)
      returns (QuerySessionsForAddressResponse) {
    option (google.api.http).get = "/accounts/{address}/sessions";
  }

  rpc QuerySession(QuerySessionRequest) returns (QuerySessionResponse) {
    option (google.api.http).get = "/sessions/{id}";
  }

  rpc QueryActiveSession(QueryActiveSessionRequest)
      returns (QueryActiveSessionResponse) {
    option (google.api.http).get = "/accounts/{address}/sessions/active";
  }
}
