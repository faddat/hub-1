// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/subscription/v1/quota.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/sentinel-official/hub/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Quota struct {
	Address   string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Allocated github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=allocated,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"allocated"`
	Consumed  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=consumed,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"consumed"`
}

func (m *Quota) Reset()      { *m = Quota{} }
func (*Quota) ProtoMessage() {}
func (*Quota) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e59de24126e6d2e, []int{0}
}
func (m *Quota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quota.Merge(m, src)
}
func (m *Quota) XXX_Size() int {
	return m.Size()
}
func (m *Quota) XXX_DiscardUnknown() {
	xxx_messageInfo_Quota.DiscardUnknown(m)
}

var xxx_messageInfo_Quota proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Quota)(nil), "sentinel.subscription.v1.Quota")
}

func init() {
	proto.RegisterFile("sentinel/subscription/v1/quota.proto", fileDescriptor_3e59de24126e6d2e)
}

var fileDescriptor_3e59de24126e6d2e = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x4d, 0x40, 0x7c, 0x34, 0x62, 0x8a, 0x18, 0xa2, 0x0e, 0x0e, 0x42, 0x08, 0xb1, 0x34, 0x56,
	0x84, 0x58, 0x18, 0xbb, 0x81, 0x90, 0x10, 0x1d, 0xd9, 0x6c, 0xc7, 0x4d, 0x2d, 0x92, 0x5c, 0xe8,
	0x9d, 0x2b, 0xf8, 0x07, 0x8c, 0x8c, 0x8c, 0xfd, 0x39, 0x65, 0xeb, 0x88, 0x18, 0x2a, 0xd4, 0x2e,
	0xfc, 0x0c, 0x94, 0xa4, 0x2d, 0x65, 0x65, 0xf2, 0x9d, 0xef, 0xdd, 0x7b, 0xcf, 0xcf, 0xde, 0x09,
	0xea, 0x82, 0x4c, 0xa1, 0x33, 0x8e, 0x56, 0xa2, 0x1a, 0x9a, 0x92, 0x0c, 0x14, 0x7c, 0x14, 0xf3,
	0x47, 0x0b, 0x24, 0xa2, 0x72, 0x08, 0x04, 0x7e, 0xb0, 0x42, 0x45, 0x9b, 0xa8, 0x68, 0x14, 0xb7,
	0x99, 0x02, 0xcc, 0x01, 0xb9, 0x14, 0xa8, 0xf9, 0x28, 0x96, 0x9a, 0x44, 0xcc, 0x15, 0x98, 0xa2,
	0xd9, 0x6c, 0x1f, 0xa6, 0x90, 0x42, 0x5d, 0xf2, 0xaa, 0x5a, 0xde, 0x86, 0x29, 0x40, 0x9a, 0x69,
	0x5e, 0x77, 0xd2, 0xf6, 0x39, 0x99, 0x5c, 0x23, 0x89, 0xbc, 0x5c, 0x02, 0xd8, 0xda, 0x16, 0x3d,
	0x97, 0x1a, 0x2b, 0x3f, 0x48, 0x82, 0x2c, 0x36, 0xf3, 0xe3, 0x77, 0xd7, 0xdb, 0xb9, 0xab, 0x0c,
	0xfa, 0x81, 0xb7, 0x27, 0x92, 0x64, 0xa8, 0x11, 0x03, 0xf7, 0xc8, 0x3d, 0x6b, 0xf5, 0x56, 0xad,
	0x7f, 0xe3, 0xb5, 0x44, 0x96, 0x81, 0x12, 0xa4, 0x93, 0x60, 0xab, 0x9a, 0x75, 0xa3, 0xc9, 0x2c,
	0x74, 0x3e, 0x67, 0xe1, 0x69, 0x6a, 0x68, 0x60, 0x65, 0xa4, 0x20, 0xe7, 0xcb, 0x07, 0x34, 0x47,
	0x07, 0x93, 0x87, 0x46, 0x32, 0xba, 0x2a, 0xa8, 0xf7, 0x4b, 0xe0, 0x5f, 0x7b, 0xfb, 0x0a, 0x0a,
	0xb4, 0xb9, 0x4e, 0x82, 0xed, 0x7f, 0x91, 0xad, 0xf7, 0x2f, 0x0f, 0x5e, 0xc6, 0xa1, 0xf3, 0x36,
	0x0e, 0x9d, 0xef, 0x71, 0xe8, 0x74, 0x6f, 0x27, 0x73, 0xe6, 0x4e, 0xe7, 0xcc, 0xfd, 0x9a, 0x33,
	0xf7, 0x75, 0xc1, 0x9c, 0xe9, 0x82, 0x39, 0x1f, 0x0b, 0xe6, 0xdc, 0x5f, 0x6c, 0x30, 0xaf, 0x02,
	0xe9, 0x40, 0xbf, 0x6f, 0x94, 0x11, 0x19, 0x1f, 0x58, 0xc9, 0x9f, 0xfe, 0x7e, 0x5b, 0x2d, 0x26,
	0x77, 0xeb, 0x8c, 0xce, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x64, 0x21, 0x6b, 0x15, 0xdc, 0x01,
	0x00, 0x00,
}

func (m *Quota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quota) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quota) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Consumed.Size()
		i -= size
		if _, err := m.Consumed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuota(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Allocated.Size()
		i -= size
		if _, err := m.Allocated.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuota(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuota(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuota(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuota(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Quota) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuota(uint64(l))
	}
	l = m.Allocated.Size()
	n += 1 + l + sovQuota(uint64(l))
	l = m.Consumed.Size()
	n += 1 + l + sovQuota(uint64(l))
	return n
}

func sovQuota(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuota(x uint64) (n int) {
	return sovQuota(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Quota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuota
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuota
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuota
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuota
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuota
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Allocated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuota
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuota
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consumed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuota(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuota
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuota(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuota
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuota
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuota
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuota
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuota        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuota          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuota = fmt.Errorf("proto: unexpected end of group")
)
